---
import { Interval, DateTime } from "luxon"
import type { Event } from "../schema/event"
import { formatTime, parseAuDate } from "@/lib/datetime"
import LocationPin from "@/icons/location-pin.astro"
import InfoIcon from "@/icons/info-icon.astro"

type Props = { event: Event }
const { event } = Astro.props
const start = parseAuDate(event.start)
const end = parseAuDate(event.end)
const duration = Interval.fromDateTimes(start, end)

const formattedTime = formatTime(start) + "â€“" + formatTime(end)
---

<div
  class="tracking-tight leading-tight flex max-w-prose flex-col gap-2 rounded-2xl p-4 transition-all duration-200 bg-stone-50 hover:bg-stone-100"
>
  <h2 class="text-center">
    <a
      class="text-xl font-bold text-slate-800 underline underline-offset-2 hover:cursor-pointer hover:bg-accent"
      href={event.link}>{event.title}</a
    >
  </h2>

  <p class="mt-2">
    {event.notes}
  </p>

  <p class="flex gap-2 justify-center items-center text-sm">
    <span class="uppercase rounded-3xl font-mono text-slate-500">
      {event.eventType}
    </span>

    <span
      class="block bg-zinc-200 px-2 uppercase rounded-xl font-bold"
      aria-label="Event fee">{event.fee > 0 ? `AU$${event.fee}` : "Free"}</span
    >
  </p>

  <div>
    <p class="text-slate-500">
      Organised by <span class="font-medium"
        >{event.organiser.map((o) => o.name).join(", ")}</span
      >
    </p>
  </div>
  <div class="flex flex-col md:flex-row justify-between">
    <div class="flex-shrink">
      <div>
        <p class="text-bold text-lg">{event.venueName}</p>
        {
          event.isOnline ? null : !event.mapLink ? (
            <p>{event.streetAddress}</p>
          ) : (
            <p>
              <a
                href={event.mapLink}
                class="underline underline-offset-2 decoration-zinc-400"
              >
                {event.streetAddress}
              </a>
            </p>
          )
        }
      </div>
      <div>
        <p class="text-sm text-slate-500">
          {
            duration.length("day") > 1 ? (
              <>
                <span class="block">
                  Starts{" "}
                  {start.toLocaleString({
                    weekday: "long",
                    day: "numeric",
                    month: "long",
                    year: "numeric",
                    hour: "numeric",
                  })}
                </span>
                <span class="block">
                  Ends{" "}
                  {end.toLocaleString({
                    weekday: "long",
                    day: "numeric",
                    month: "long",
                    year: "numeric",
                    hour: "numeric",
                  })}
                </span>
              </>
            ) : (
              <>
                <span class="block">
                  {start.toLocaleString(DateTime.DATE_HUGE)}
                </span>
                <span class="block">{formattedTime}</span>
              </>
            )
          }
        </p>
      </div>
    </div>
    <ul
      class="uppercase flex-shrink-0 text-sm flex gap-2 md:flex-col md:items-end"
    >
      <li>
        <a
          class="underline underline-offset-2 text-slate-500 flex items-center gap-1"
          href={event.link}
        >
          <InfoIcon />
          event details</a
        >
      </li>
      {
        event.isOnline ? (
          <li>Online</li>
        ) : event.mapLink ? (
          <li>
            <a
              class="underline underline-offset-2 text-slate-500 flex items-center gap-1"
              href={event.mapLink}
            >
              <LocationPin />
              view map
            </a>
          </li>
        ) : null
      }
    </ul>
  </div>
</div>
