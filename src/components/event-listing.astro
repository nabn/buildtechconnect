---
import { Interval, DateTime } from "luxon"
import type { Event } from "../schema/event"

type Props = {
  event: Event
}
const { event } = Astro.props
const start = DateTime.fromJSDate(new Date(event.start))
const end = DateTime.fromJSDate(new Date(event.end))
const duration = Interval.fromDateTimes(start, end)

const formattedTime =
  start.toLocaleString({ hour: "numeric", minute: "numeric" }) +
  "â€“" +
  end.toLocaleString({
    hour: "numeric",
    minute: "numeric",
    timeZoneName: "short",
  })
---

<div
  class="tracking-tight leading-tight flex max-w-prose flex-col gap-4 rounded-2xl p-4 transition-all duration-200 bg-stone-50 hover:bg-stone-100"
>
  <h2>
    <a
      class="text-xl font-bold text-slate-800 underline hover:cursor-pointer hover:bg-accent"
      href={event.link}>{event.title}</a
    >
  </h2>

  <p>
    {event.notes}
  </p>

  <p>
    <span class="text-slate-500"> Organised by </span><span class="font-medium"
      >{event.organiser.map((o) => o.name).join(", ")}</span
    >
  </p>

  <p class="flex gap-2 items-center text-sm">
    <span class="block uppercase rounded-3xl font-mono text-slate-500">
      {event.eventType}
    </span>

    <span class="block bg-slate-200 px-2 uppercase rounded-xl font-bold"
      >{event.fee > 0 ? `AU$${event.fee}` : "Free"}</span
    >
  </p>

  <div class="flex flex-wrap justify-between">
    <div class="flex-1">
      <p class="text-bold text-lg">{event.venueName}</p>
      <p class="text-sm text-slate-500">
        {
          duration.length("day") > 1 ? (
            <>
              <span class="block">
                Starts{" "}
                {start.toLocaleString({
                  weekday: "long",
                  day: "numeric",
                  month: "long",
                  year: "numeric",
                  hour: "numeric",
                })}
              </span>
              <span class="block">
                Ends{" "}
                {end.toLocaleString({
                  weekday: "long",
                  day: "numeric",
                  month: "long",
                  year: "numeric",
                  hour: "numeric",
                })}
              </span>
            </>
          ) : (
            <>
              <span class="block">
                {start.toLocaleString(DateTime.DATE_HUGE)}
              </span>
              <span class="block">{formattedTime}</span>
            </>
          )
        }
      </p>
    </div>
    <hr />
    <ul class="flex-1 uppercase text-sm flex flex-col items-end">
      {
        event.isOnline ? (
          <p>Online</p>
        ) : event.mapLink ? (
          <li>
            <a class="underline text-slate-400" href={event.mapLink}>
              view map
            </a>
          </li>
        ) : null
      }
      <li>
        <a class="underline text-slate-500" href={event.link}> event details</a>
      </li>
    </ul>
  </div>
</div>
