---
import { Interval, DateTime } from "luxon"
import type { Event } from "../schema/event"

type Props = {
  event: Event
}
const { event } = Astro.props
const start = DateTime.fromJSDate(new Date(event.start))
const end = DateTime.fromJSDate(new Date(event.end))
const duration = Interval.fromDateTimes(start, end)

const formattedTime =
  start.toLocaleString({
    hour: "numeric",
    minute: "numeric",
    timeZone: "Australia/Sydney",
  }) +
  "â€“" +
  end.toLocaleString({
    hour: "numeric",
    minute: "numeric",
    timeZone: "Australia/Sydney",
  })
---

<div
  class="tracking-tight leading-tight flex max-w-prose flex-col gap-2 rounded-2xl p-4 transition-all duration-200 bg-stone-50 hover:bg-stone-100"
>
  <h2 class="text-center">
    <a
      class="text-xl font-bold text-slate-800 underline underline-offset-2 hover:cursor-pointer hover:bg-accent"
      href={event.link}>{event.title}</a
    >
  </h2>

  <p class="mt-2">
    {event.notes}
  </p>

  <p class="flex gap-2 justify-center items-center text-sm">
    <span class="uppercase rounded-3xl font-mono text-slate-500">
      {event.eventType}
    </span>

    <span
      class="block bg-zinc-200 px-2 uppercase rounded-xl font-bold"
      aria-label="Event fee">{event.fee > 0 ? `AU$${event.fee}` : "Free"}</span
    >
  </p>

  <div>
    <p class="text-slate-500">
      Organised by <span class="font-medium"
        >{event.organiser.map((o) => o.name).join(", ")}</span
      >
    </p>
  </div>
  <div class="flex flex-col md:flex-row flex-wrap justify-between">
    <div>
      <div>
        <p class="text-bold text-lg">{event.venueName}</p>
        {
          event.isOnline ? null : (
            <p>
              <a
                href={event.mapLink}
                class="underline underline-offset-2 decoration-zinc-400"
              >
                {event.streetAddress}
              </a>
            </p>
          )
        }
      </div>
      <div>
        <p class="text-sm text-slate-500">
          {
            duration.length("day") > 1 ? (
              <>
                <span class="block">
                  Starts{" "}
                  {start.toLocaleString({
                    weekday: "long",
                    day: "numeric",
                    month: "long",
                    year: "numeric",
                    hour: "numeric",
                  })}
                </span>
                <span class="block">
                  Ends{" "}
                  {end.toLocaleString({
                    weekday: "long",
                    day: "numeric",
                    month: "long",
                    year: "numeric",
                    hour: "numeric",
                  })}
                </span>
              </>
            ) : (
              <>
                <span class="block">
                  {start.toLocaleString(DateTime.DATE_HUGE)}
                </span>
                <span class="block">{formattedTime}</span>
              </>
            )
          }
        </p>
      </div>
    </div>
    <ul class="uppercase text-sm flex gap-2 md:flex-col md:items-end">
      <li>
        <a
          class="underline underline-offset-2 text-slate-500 flex items-center gap-1"
          href={event.link}
        >
          <svg
            width="1rem"
            height="1rem"
            stroke-width="1.5"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            color="#000000"
          >
            <path
              d="M12 11.5V16.5"
              stroke="#000000"
              stroke-width="1.5"
              stroke-linecap="round"
              stroke-linejoin="round"></path>
            <path
              d="M12 7.51L12.01 7.49889"
              stroke="#000000"
              stroke-width="1.5"
              stroke-linecap="round"
              stroke-linejoin="round"></path>
            <path
              d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"
              stroke="#000000"
              stroke-width="1.5"
              stroke-linecap="round"
              stroke-linejoin="round"></path>
          </svg>
          event details</a
        >
      </li>
      {
        event.isOnline ? (
          <li>Online</li>
        ) : event.mapLink ? (
          <li>
            <a
              class="underline underline-offset-2 text-slate-500 flex items-center gap-1"
              href={event.mapLink}
            >
              <svg
                width="1rem"
                height="1rem"
                stroke-width="1.5"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                color="#000000"
              >
                <>
                  <path
                    d="M20 10C20 14.4183 12 22 12 22C12 22 4 14.4183 4 10C4 5.58172 7.58172 2 12 2C16.4183 2 20 5.58172 20 10Z"
                    stroke="#000000"
                    stroke-width="1.5"
                  />
                  <path
                    d="M12 11C12.5523 11 13 10.5523 13 10C13 9.44772 12.5523 9 12 9C11.4477 9 11 9.44772 11 10C11 10.5523 11.4477 11 12 11Z"
                    fill="#000000"
                    stroke="#000000"
                    stroke-width="1.5"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </>
              </svg>
              view map
            </a>
          </li>
        ) : null
      }
    </ul>
  </div>
</div>
